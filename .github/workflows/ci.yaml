name: Flutter CI/CD

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  FLUTTER_VERSION: "3.19.0"
  JAVA_VERSION: "17"
  GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

jobs:
  analyze_and_test:
    name: üîç Analyze & Test
    runs-on: ubuntu-latest
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: üê¶ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üîß Create .env file
        run: echo "GOOGLE_MAPS_API_KEY=${{ env.GOOGLE_MAPS_API_KEY }}" > .env

      - name: üîç Static analysis
        run: flutter analyze --fatal-infos

      - name: üß™ Run tests
        run: flutter test --coverage --reporter=expanded

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: üìÑ Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  dependency_check:
    name: üìã Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê¶ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üîç Check for outdated packages
        run: dart pub outdated --mode=null-safety

      - name: üîí Check for security vulnerabilities
        run: |
          flutter pub deps
          echo "‚úÖ Dependency check completed"

  build_android:
    name: ü§ñ Build Android
    runs-on: ubuntu-latest
    needs: [analyze_and_test]
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: ‚òï Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: üê¶ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: üì¶ Get dependencies
        run: flutter pub get

      - name: üîß Create .env file
        run: echo "GOOGLE_MAPS_API_KEY=${{ env.GOOGLE_MAPS_API_KEY }}" > .env

      - name: üî® Build APK
        run: flutter build apk --release --split-per-abi

      - name: üì¶ Build App Bundle
        run: flutter build appbundle --release

      - name: üì± Upload APK (arm64-v8a)
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-arm64
          path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          retention-days: 30

      - name: üì± Upload APK (armeabi-v7a)
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-arm32
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          retention-days: 30

      - name: üì± Upload APK (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-x64
          path: build/app/outputs/flutter-apk/app-x86_64-release.apk
          retention-days: 30

      - name: üì¶ Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  # If builder in IOS
  # build_ios:
  #   name: üçé Build iOS
  #   runs-on: macos-latest
  #   needs: [analyze_and_test]
  #   if: runner.os == 'macOS' || github.event_name == 'workflow_dispatch'
  #   steps:
  #     - name: üìö Checkout repository
  #       uses: actions/checkout@v4

  #     - name: üê¶ Set up Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: stable
  #         flutter-version: ${{ env.FLUTTER_VERSION }}

  #     - name: üì¶ Get dependencies
  #       run: flutter pub get

  #     - name: üîß Create .env file
  #       run: echo "GOOGLE_MAPS_API_KEY=${{ env.GOOGLE_MAPS_API_KEY }}" > .env

  #     - name: üî® Build iOS (no codesign)
  #       run: flutter build ios --release --no-codesign

  #     - name: üì± Archive iOS app
  #       run: |
  #         cd build/ios/iphoneos
  #         zip -r DoaLink-iOS.zip Runner.app

  #     - name: üì± Upload iOS Build
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ios-build
  #         path: build/ios/iphoneos/DoaLink-iOS.zip
  #         retention-days: 30

  create_release:
    name: üöÄ Create Release Package
    runs-on: ubuntu-latest
    needs: [analyze_and_test, build_android, dependency_check]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download Android APK (arm64)
        uses: actions/download-artifact@v4
        with:
          name: android-apk-arm64
          path: ./release/android/

      - name: üì• Download Android APK (arm32)
        uses: actions/download-artifact@v4
        with:
          name: android-apk-arm32
          path: ./release/android/

      - name: üì• Download Android APK (x64)
        uses: actions/download-artifact@v4
        with:
          name: android-apk-x64
          path: ./release/android/

      - name: üì• Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: ./release/android/

      - name: üìã Generate build info
        run: |
          mkdir -p ./release/info
          cat > ./release/info/build_info.md << EOF
          # üì± DoaLink - Build Information

          ## üîß Build Details
          - **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Flutter Version:** ${{ env.FLUTTER_VERSION }}
          - **Java Version:** ${{ env.JAVA_VERSION }}
          - **Workflow:** ${{ github.workflow }}

          ## üì¶ Artifacts Included

          ### ü§ñ Android
          - **APK (ARM64):** \`app-arm64-v8a-release.apk\` - Para dispositivos modernos (recomendado)
          - **APK (ARM32):** \`app-armeabi-v7a-release.apk\` - Para dispositivos mais antigos
          - **APK (x64):** \`app-x86_64-release.apk\` - Para emuladores
          - **App Bundle:** \`app-release.aab\` - Para publica√ß√£o na Play Store

          ## üì≤ Instala√ß√£o

          1. **Baixe o APK ARM64** (recomendado para a maioria dos dispositivos)
          2. **Habilite "Fontes desconhecidas"** nas configura√ß√µes do Android
          3. **Instale o APK** no dispositivo

          ## ‚ö†Ô∏è Notas Importantes

          - Este √© um build de produ√ß√£o com chave da API do Google Maps inclu√≠da
          - O APK est√° pronto para instala√ß√£o e uso imediato
          - Veja o arquivo \`INSTALL.md\` para instru√ß√µes detalhadas de instala√ß√£o

          EOF

      - name: üìù Create installation instructions
        run: |
          cat > ./release/info/INSTALL.md << EOF
          # üì≤ Instru√ß√µes de Instala√ß√£o - DoaLink

          ## ü§ñ Android

          ### Op√ß√£o 1: APK (Instala√ß√£o Direta)
          1. **Escolha o APK correto:**
             - **ARM64** (\`app-arm64-v8a-release.apk\`): Para a maioria dos dispositivos modernos
             - **ARM32** (\`app-armeabi-v7a-release.apk\`): Para dispositivos mais antigos
             - **x64** (\`app-x86_64-release.apk\`): Para emuladores

          2. **Configure seu dispositivo:**
             - V√° em **Configura√ß√µes > Seguran√ßa**
             - Habilite **"Fontes desconhecidas"** ou **"Instalar apps desconhecidos"**

          3. **Instale o app:**
             - Transfira o APK para seu dispositivo
             - Abra o arquivo APK
             - Toque em **"Instalar"**

          ### Op√ß√£o 2: App Bundle (Para Desenvolvedores)
          - Use o arquivo \`.aab\` para publicar na Google Play Store
          - Requer conta de desenvolvedor do Google Play

          ## üîß Configura√ß√£o Inicial

          1. **Google Maps:**
             - ‚úÖ A chave da API do Google Maps j√° est√° inclu√≠da no APK
             - O mapa funcionar√° imediatamente ap√≥s a instala√ß√£o

          2. **Permiss√µes:**
             - O app solicitar√° permiss√µes de localiza√ß√£o
             - Necess√°rio para funcionalidades de mapa e geolocaliza√ß√£o

          ## üÜò Problemas Comuns

          - **"App n√£o instalado"**: Verifique se habilitou fontes desconhecidas
          - **"Arquivo corrompido"**: Baixe o APK novamente
          - **"Mapa n√£o carrega"**: Verifique sua conex√£o com a internet
          - **"Localiza√ß√£o n√£o funciona"**: Permita acesso √† localiza√ß√£o nas configura√ß√µes

          EOF

      - name: üì¶ Create release package
        run: |
          cd release
          zip -r "../DoaLink-Release-${{ github.sha }}.zip" . -x "*.git*"
          cd ..

          # Criar um APK principal (ARM64) para instala√ß√£o r√°pida
          cp "./release/android/app-arm64-v8a-release.apk" "./DoaLink-Install.apk"

      - name: üöÄ Upload final release package
        uses: actions/upload-artifact@v4
        with:
          name: doalink-complete-release
          path: DoaLink-Release-${{ github.sha }}.zip
          retention-days: 90

      - name: üì± Upload installation APK
        uses: actions/upload-artifact@v4
        with:
          name: doalink-install-apk
          path: DoaLink-Install.apk
          retention-days: 90

  notify_results:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [analyze_and_test, build_android, dependency_check, create_release]
    if: always()
    steps:
      - name: üìä Check job results
        run: |
          echo "## üìä Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Analyze & Test | ${{ needs.analyze_and_test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ü§ñ Build Android | ${{ needs.build_android.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìã Dependency Check | ${{ needs.dependency_check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Create Release | ${{ needs.create_release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.create_release.result }}" == "success" ]]; then
            echo "‚úÖ **Release criado com sucesso!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üì± **Para instalar:** Baixe o artifact \`doalink-install-apk\`" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ **Release completo:** \`doalink-complete-release\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Falha na cria√ß√£o do release**" >> $GITHUB_STEP_SUMMARY
          fi
